NOTE - Duties and Responsibilities:
Please be mindful of Adroit maintainers and only cut a release during deploy hours: M-F 9AM-4PM PST. Escalate to the #oncall person or @luca for urgent requests.
All changes affecting online traffic in prod, should be verified on staging. Testing in production is risky! Please do not test in prod without communicating in advance with the CoreML oncall engineer or manager.
Please revert your changes, if anything is wrong in staging.
Please do not leave broken or unverified changes on staging overnight. Communication with other engineers participating in a staging/prod deployment is key. Other devs might not be aware that staging is broken. This has caused outages in the past.
Ownership: it is the engineer's responsibility that the code lands successfully in staging and then in prod. (Example of behavior to avoid: merge to main or cut a release and then go AFK).
HowTo: Deploy on Staging
main always gets deployed to staging immediately after every commit to main. You can monitor the deployment on Konductor here. The #konductor-adoit slack channel will be notified if staging deployment fails.

If the staging deployment succeeds and you should verify your changes are healthy in two ways:

Check for errors in staging on datadog
Verify requests to your new flavor work as intended via an ozctl shell (see the instructions below)
‚ö†Ô∏è Important ‚ö†Ô∏è

Once you merged your changes, Konductor will add it to a train and deploy. Once a train is on the tracks, it is the only train that can be deployed to staging or production. When this happens, you may be assigned to be the train engineer. As a train engineer you are expected to actively monitor the deployment progress and ensure its success. If you do not do so, trains will likely remained blocked and we will be unable to deploy anything.

As will be described in the following section, you may need to verify that the changes work in staging. If you need more time to verify than the time it takes for a single deployment (roughly 45 minutes for staging and 1h30 minutes for production), please add the staging_only flag to your flavor.

adsPctrV5:
  owner: 'ads'
  staging_only: true # üëà
  instance_config:
    memory_reservation_per_proc: 1500
    min_prod_containers: 3
  model_info:
    name: ads_pclick_lines_v5
    version: 694a577a-4e2a-4aee-b81c-90ddc46d063b # runId a981dcc2fffc4796b130bf9aae96bf55
    config_path: 'ads_pclick_lines_v5/config.yaml'
    conda_env: scikit-learn-2022-10
HowTo: Deploy on Production
Deployment to production is semi-automated. If flavors.yaml is unchanged, changes are deployed to production in a continuous deployment fashion.

If flavors.yaml has changed, Konductor will slack the train engineer to attest that the changes have been verified by "unblocking" the train. This can be done in the Konductor UI like so:

254429124-e01d3912-f598-4bb2-ba2f-567149056b23.png

254429136-61adb85d-ed0e-4d6a-9e40-46adf672fabc.png

HowTo: Verify your changes via ozctl
The easiest way to verify that the classifier is working as expected is to open a django shell on staging/prod and make calls to the django endpoint that sends requests to adroit.

Follow the instructions to open up a Python shell using ozctl (Staging Instructions, Production Instructions)
In the shell, run something like the following and make sure you get the expected successful response (modify the features, model_name, and version to match your new flavor)
from nextdoor.util.adroit import client
c = client.get_adroit_client()
model_name = 'sage_businesstagging_sentiment_classifier'
version = 'c80c6746-9dc7-417a-933d-9ddfc4afe3aa'
data_x = [
    'Youfit. I go there. Nice and Clean. 10$ a month. 5 mins down the street.',
    'Pipetechs plumbing. The best in the area. That is who we use for all of our customers.',
    'I used Georgia Auto glass from Angie;s list and they were quick, did quality work',
    'Again, I would avoid Northrup Roofing - several reasons. Quality being on the list.'
]
features = [{'body': x} for x in data_x]
c.get_predictions(model_name, version, features)
Additional Legacy docs: https://nextdoor.atlassian.net/wiki/spaces/ENG/pages/790102165/Adroit+User+Guide+How+to+write+test+and+deploy+a+classifier+on+Adroit